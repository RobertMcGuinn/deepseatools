[["index.html", "Deep Sea Code Book 1 Introduction 1.1 License 1.2 Disclaimer", " Deep Sea Code Book Robert P. McGuinn 1 Introduction Development note: As of 2021-03-11 this tutorial is under active development. Make a bookmark and check back often for additional materials and improvements to contents. This set of instructions is designed help the R user begin to use the National Database for Deep Sea Corals and Sponges. This is a work in progress and we invite collaboration! Please help us evolve this code-base to be easier, faster, and do more things! If you would like to reach out directly please email robert.mcguinn@noaa.gov or call 843-460-9696. For further information about deep sea corals, please visit DeepSeaCoralData.NOAA.gov Check out this GitHub repository to collaborate directly. All of the code used in the project is available in the code folder at that repository. This tutorial will eventually expand to cover most of the functionality present in that code folder. If you would rather download data using point and click in a web browser and work with these data in ArcGIS Pro, take a look at this tutorial instead. LINK 1.1 License Software code created by U.S. Government employees is not subject to copyright in the United States (17 U.S.C.ยง105). The United States/Department of Commerce reserve all rights to seek and obtain copyright protection in countries other than the United States for Software authored in its entirety by the Department of Commerce. To this end, the Department of Commerce hereby grants to Recipient a royalty-free, nonexclusive license to use,copy, and create derivative works of the Software outside of the United States. 1.2 Disclaimer This repository is a scientific product and is not official communication of the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All NOAA GitHub project code is provided on an as is basis and the user assumes responsibility for its use. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by DOC or the United States Government. "],["downloading-the-data.html", "2 Downloading the data 2.1 Using ERDDAP to download data 2.2 Get data using a CSV", " 2 Downloading the data In preparation for downloading and working with these data, you will need to load some additional R packages. The install.packages commands below are commented out, so if you need to install, you will need to un-comment those before running this code. # install.packages(&quot;dplyr&quot;) library(dplyr) # install.packages(&quot;rerddap&quot;) library(rerddap) # install.packages(&quot;leaflet&quot;) library(leaflet) # install.packages(&quot;RColorBrewer&quot;) library(RColorBrewer) # install.packages(&quot;ggplot2&quot;) library(ggplot2) # install.packages(&quot;rmarkdown&quot;) library(rmarkdown) # install.packages(&quot;knitr&quot;) library(knitr) 2.1 Using ERDDAP to download data Getting data directly from ERDDAP (Environmental Resource Division Data Access Protocol) using rerddap package in R. To see the meanings and valid values for all of the fields in National Database, download an Excel version of the full data dictionary following location: LINK Use the info function from the rerddap package to get information about the variables (fields) in the database. Note that the Latitude and Longitude fields are in ERDDAP as latitude and longitude, with no capital letters. These are the only field names that differ from what is in the data dictionary. info &lt;- info(datasetid=&#39;deep_sea_corals&#39;, url = &quot;https://www.ncei.noaa.gov/erddap/&quot;) Now take a look at the first 5 field names using the head function. head(info$variables) ## variable_name data_type actual_range ## 1 AphiaID int -999, 1419323 ## 2 AssociatedSequences String ## 3 AssociatedTaxa String ## 4 CatalogNumber int 1, 1045199 ## 5 CategoricalAbundance String ## 6 Citation String To list all variables in the NOAA, National Database for Deep Sea Corals and Sponges , then use the following: info$variables When you have the variables (fields) that you want to download in mind after reviewing the data dictionary, you can download them using the following tabledap function from the rerddap package. In the code below, you can see an example of setting specific geographic bounding box constraints and selecting a particular Vessel. You can set any numeric or character-based constraint on your downloads using this basic syntax. If you set no contraints, you will download all data. Warning: If you add no constraints, the data download will take more time, so be patient. You can also filter your data after downloading if you would prefer, rather than using constraints in the tabledap function. This might be preferable if you want to intially download all of the data and all of the fields for exploration. The example below contains constraints. Note: Character constraints must be enclosed in double quotes. So the syntax for a constraint is: Vessel=Okeanos Explorer R/V. Variables can be listed in any order desired. Getting the full database may be preferable if you are using it regularly in your work. library(rerddap) d &lt;- tabledap(&quot;deep_sea_corals&quot;, &#39;longitude&lt;50&#39;, &#39;latitude&gt;20&#39;, &#39;latitude&lt;30&#39;, &#39;Vessel=&quot;Okeanos Explorer R/V&quot;&#39;, fields=c(&#39;DatabaseVersion&#39;, &#39;CatalogNumber&#39;, &#39;latitude&#39;, &#39;longitude&#39;, &#39;ScientificName&#39;, &#39;ImageURL&#39;, &#39;Vessel&#39;, &#39;RecordType&#39;, &#39;DatasetID&#39;, &#39;SurveyID&#39;, &#39;SampleID&#39;, &#39;TrackingID&#39;, &#39;Station&#39;, &#39;Locality&#39;, &#39;ObservationYear&#39;, &#39;Genus&#39;, &#39;Phylum&#39;, &#39;TaxonRank&#39;, &#39;DepthInMeters&#39;), url = &quot;https://www.ncei.noaa.gov/erddap/&quot;) Check the size of the data frame that you just downloaded using the dim function. x &lt;- dim(d) x ## [1] 30562 19 The dataframe that you downloaded contains 30562 rows (occurrences) by 19 fields. Now list the names of the fields to check that you downloaded the fields that you wanted. names(d) ## [1] &quot;DatabaseVersion&quot; &quot;CatalogNumber&quot; &quot;latitude&quot; ## [4] &quot;longitude&quot; &quot;ScientificName&quot; &quot;ImageURL&quot; ## [7] &quot;Vessel&quot; &quot;RecordType&quot; &quot;DatasetID&quot; ## [10] &quot;SurveyID&quot; &quot;SampleID&quot; &quot;TrackingID&quot; ## [13] &quot;Station&quot; &quot;Locality&quot; &quot;ObservationYear&quot; ## [16] &quot;Genus&quot; &quot;Phylum&quot; &quot;TaxonRank&quot; ## [19] &quot;DepthInMeters&quot; Now filter the downloaded data for only those records which have images and take a look at the head of the dataframe. d &lt;- d %&gt;% filter(is.na(d$ImageURL) == F) head(d) ## &lt;ERDDAP tabledap&gt; deep_sea_corals ## Path: [C:\\Users\\ROBERT~1.MCG\\AppData\\Local/Cache/R/rerddap/2f86982e23e0cc5e2ae70a1af066cd14.csv] ## Last updated: [2021-03-11 07:28:50] ## File size: [8.72 mb] ## # A tibble: 6 x 19 ## DatabaseVersion CatalogNumber latitude longitude ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 20201021-0 419497 26.46665 -84.77803 ## 2 20201021-0 419498 26.46664 -84.77803 ## 3 20201021-0 419499 26.46664 -84.77804 ## 4 20201021-0 419500 26.46662 -84.77801 ## 5 20201021-0 419501 26.46662 -84.778 ## 6 20201021-0 419502 26.46664 -84.778 ## # ... with 15 more variables: ScientificName &lt;chr&gt;, ## # ImageURL &lt;chr&gt;, Vessel &lt;chr&gt;, RecordType &lt;chr&gt;, ## # DatasetID &lt;chr&gt;, SurveyID &lt;chr&gt;, SampleID &lt;chr&gt;, ## # TrackingID &lt;chr&gt;, Station &lt;chr&gt;, Locality &lt;chr&gt;, ## # ObservationYear &lt;int&gt;, Genus &lt;chr&gt;, Phylum &lt;chr&gt;, ## # TaxonRank &lt;chr&gt;, DepthInMeters &lt;chr&gt; Use the following loop function to browse the first 5 images in the set. The ImageURL variable contains the URL of the hosted images. The browseURL function will open the images in your default image editing program. Warning: Careful when using this function in a loop as it will open as many URLs as you feed it, so it could crash your computer. for (i in head(d$ImageURL)){ browseURL(i) } 2.2 Get data using a CSV Alternatively, you can upload data directly from CSV file into R, if you already have a subset of the National Database on your local machine that you would like to use instead. setwd(&quot;C:/your/working/directory&quot;) d &lt;- read.csv(&quot;data_records.csv&quot;, header = T) "],["creating-interactive-maps-using-leaflet.html", "3 Creating interactive maps using Leaflet", " 3 Creating interactive maps using Leaflet Map the downloaded and filtered data d using the leaflet package. # add a proper link to images for map popup in leaflet d$ImageURLPop &lt;- paste(sep = &quot;&quot;, &quot;&lt;b&gt;&lt;a href=&quot;, as.character(d$ImageURL),&quot;&gt;LINK&lt;/a&gt;&lt;/b&gt;&quot;) # build map m &lt;- leaflet() %&gt;% addProviderTiles(&quot;Esri.OceanBasemap&quot;) %&gt;% #Esri.OceanBasemap, &quot;CartoDB.DarkMatter&quot; addProviderTiles(providers$Hydda.RoadsAndLabels, group = &#39;Place names&#39;) %&gt;% addCircleMarkers(data=d, lat = as.numeric(d$latitude), lng = as.numeric(d$longitude), radius=5, weight=0, fillColor= &quot;green&quot;, fillOpacity=1, popup = paste( &quot;CatalogNumber:&quot;, d$CatalogNumber, &quot;&lt;br&gt;&quot;, &quot;ScientificName:&quot;, d$ScientificName, &quot;&lt;br&gt;&quot;, &quot;Image:&quot;, d$ImageURLPop, &quot;&lt;br&gt;&quot;, &quot;RecordType:&quot;, d$RecordType, &quot;&lt;br&gt;&quot;, &quot;Vessel:&quot;, d$Vessel, &quot;&lt;br&gt;&quot;, &quot;DatasetID:&quot;, d$DatasetID, &quot;&lt;br&gt;&quot;, &quot;SurveyID:&quot;, d$SurveyID, &quot;&lt;br&gt;&quot;, &quot;SampleID:&quot;, d$SampleID, &quot;&lt;br&gt;&quot;, &quot;TrackingID:&quot;, d$TrackingID, &quot;&lt;br&gt;&quot;, &quot;Station:&quot;, d$Station, &quot;&lt;br&gt;&quot;, &quot;Locality:&quot;, d$Locality, &quot;&lt;br&gt;&quot;, &quot;Latitude:&quot;, d$latitude, &quot;&lt;br&gt;&quot;, &quot;Longitude:&quot;, d$longitude, &quot;&lt;br&gt;&quot;, &quot;Observation Year:&quot;, d$ObservationYear)) m "],["creating-a-simple-depth-summary-table.html", "4 Creating a simple depth summary table", " 4 Creating a simple depth summary table Make a depth summary table and just take a look at the first 5 entries using the head function. sum_tbl &lt;- d %&gt;% group_by(Genus) %&gt;% summarize( Phylum = paste(unique(Phylum), collapse= &quot; | &quot;), ScientificName = paste(unique(ScientificName), collapse= &quot; | &quot;), Records = n(), MinDepth = min(as.numeric(DepthInMeters)), MedianDepth = median(as.numeric(DepthInMeters)), MaxDepth = max(as.numeric(DepthInMeters))) %&gt;% arrange(MedianDepth) kable(head(sum_tbl)) Genus Phylum ScientificName Records MinDepth MedianDepth MaxDepth Antipathella Cnidaria Antipathella 4 306 335.5 362 Eguchipsammia Cnidaria Eguchipsammia fistula 4 334 352.0 376 Gymnorete Porifera Gymnorete 3 343 353.0 392 Dendropathes Cnidaria Dendropathes 2 363 367.0 371 Aphanipathes Cnidaria Aphanipathes 2 350 377.0 404 Tylopathes Cnidaria Tylopathes 4 362 392.0 423 "],["example-rmarkdown-reports.html", "5 Example RMarkdown Reports 5.1 Example 1: R-Markdown for Word document output. 5.2 Example 2: R-Markdown for web page output.", " 5 Example RMarkdown Reports 5.1 Example 1: R-Markdown for Word document output. Example R-Markdown document for data QA report generation. Click this link to download the R-Markdown source code: LINK View the source code of the same R-Markdown file on GitHub: LINK View the Word document output. LINK 5.2 Example 2: R-Markdown for web page output. See links below for example R-Markdown based report for dataset dashboarding for web publication (html output) with Leaflet interactive mapping component. Click this link to download the R-Markdown source code: LINK View the source code of the same R-Markdown file on GitHub: LINK View the web page output. LINK "]]
